# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iWyIFwgJ5AlTHgeUIXHpQgYqTXDK5SWN
"""

"""
Simulación del modelo tumor-sistema inmune usando ecuaciones diferenciales tipo Lotka-Volterra.
Autor: Aidé Primero Reyes
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# ========================
# Parámetros del sistema
# ========================
# Puedes ajustar estos valores
a = 0.5   # Crecimiento de células tumorales
b = 0.3   # Interacción entre tumor e inmunidad
c = 0.05  # Necrosis o autolimitación del tumor
d = 0.4   # Activación inmune
e = 0.1   # Inhibición inmune por tumor
f = 0.5   # Muerte natural del sistema inmune

# ========================
# Sistema de EDOs
# ========================
def sistema(t, z):
    x, y = z
    dxdt = (a - c) * x - b * x * y
    dydt = (d - e) * x * y - f * y
    return [dxdt, dydt]

# ========================
# Plano fase (quiver plot)
# ========================
x_vals = np.linspace(0, 15, 20)
y_vals = np.linspace(0, 15, 20)
X, Y = np.meshgrid(x_vals, y_vals)
U = (a - c) * X - b * X * Y
V = (d - e) * X * Y - f * Y
norm = np.sqrt(U*2 + V*2)
U /= norm
V /= norm

# ========================
# Condiciones iniciales
# ========================
condiciones_iniciales = [
    [1.5, 4.0],  # A: Tumor pequeño, inmunidad alta
    [4.0, 1.5],  # B: Tumor grande, inmunidad baja
    [3.0, 3.0],  # C: Ambos en equilibrio
    [5.0, 5.0],  # D: Ambos altos
]
etiquetas = ['A', 'B', 'C', 'D']

# Malla adicional
x0s = np.linspace(0.5, 7.5, 5)
y0s = np.linspace(0.5, 7.5, 5)
malla = [[x0, y0] for x0 in x0s for y0 in y0s]

# Tiempo de simulación
t_span = (0, 40)
t_eval = np.linspace(*t_span, 1000)

# ========================
# Gráfico del plano fase
# ========================
plt.figure(figsize=(8, 8))
plt.quiver(X, Y, U, V, color='gray', alpha=0.3)

# Trayectorias desde malla
for z0 in malla:
    sol = solve_ivp(sistema, t_span, z0, t_eval=t_eval, rtol=1e-8)
    plt.plot(sol.y[0], sol.y[1], color='royalblue', alpha=0.5, linewidth=0.8)

# Trayectorias destacadas
for i, z0 in enumerate(condiciones_iniciales):
    sol = solve_ivp(sistema, t_span, z0, t_eval=t_eval)
    plt.plot(sol.y[0], sol.y[1], 'r', linewidth=2)
    plt.plot(sol.y[0][0], sol.y[1][0], 'ro')
    plt.text(sol.y[0][0] + 0.3, sol.y[1][0], etiquetas[i], fontsize=12)

# Puntos de equilibrio
P1 = (0, 0)
P2 = (f / (d - e), (a - c) / b)
for px, py in [P1, P2]:
    plt.plot(px, py, 'ko', markersize=6)

# Líneas guía
plt.axvline(x=P2[0], color='green', linestyle='--', linewidth=1)
plt.axhline(y=P2[1], color='green', linestyle='--', linewidth=1)

# Etiquetas
plt.xlabel("x (células tumorales, en unidades de $10^7$)")
plt.ylabel("y (células inmunes, en unidades de $10^7$)")
plt.title("Plano fase: interacción tumor-inmunidad")
plt.xlim(-0.1, 15)
plt.ylim(-0.1, 15)
plt.grid(True)
plt.axis("equal")
plt.tight_layout()
plt.show()

# ========================
# Análisis de máximos y mínimos
# ========================
print("Máximos y mínimos para las trayectorias destacadas:")
for i, z0 in enumerate(condiciones_iniciales):
    sol = solve_ivp(sistema, t_span, z0, t_eval=t_eval)
    x_trajectory = sol.y[0]
    y_trajectory = sol.y[1]

    max_x = np.max(x_trajectory)
    min_x = np.min(x_trajectory)
    max_y = np.max(y_trajectory)
    min_y = np.min(y_trajectory)

    print(f"\nCaso {etiquetas[i]} (Inicial: {z0}):")
    print(f"  Células tumorales - Mínimo: {min_x:.4f}, Máximo: {max_x:.4f}")
    print(f"  Células inmunes    - Mínimo: {min_y:.4f}, Máximo: {max_y:.4f}")